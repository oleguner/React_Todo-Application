{"version":3,"sources":["components/TodoApp/TodoApp.jsx","components/TodoItem/TodoItem.jsx","components/TodosFilter/TodosFilter.jsx","components/TodoList/TodoList.jsx","App.js","index.js"],"names":["TodoApp","onAdd","useState","title","setTitle","className","onSubmit","submitEvent","preventDefault","date","Date","now","id","completed","value","onKeyDown","keyEvent","key","onChange","changeEvent","target","type","placeholder","TodoItem","todo","onDelete","handleEditChanges","checked","setChecked","useEffect","onDoubleClick","clickEvent","li","currentTarget","closest","input","querySelector","classList","add","focus","onClick","todoText","remove","length","TodosFilter","clearing","sortTodos","classAll","setClassAll","classActive","setClassActive","classCompleted","setClassCompleted","handleClick","event","name","TodoList","todos","handleClearing","sortedTodo","setSortedTodo","notes","setNotes","filter","it","map","buttom","App","JSON","parse","window","localStorage","getItem","setTodos","setTodo","isAllChecked","setAllChecked","prevTodos","setItem","stringify","handleCheckbox","useCallback","completedTodo","find","item","newTodos","note","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d4b8a41.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoApp.scss';\n\nexport const TodoApp = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n\n  const handleChange = (changeEvent) => {\n    setTitle(changeEvent.target.value);\n  };\n\n  const handleSubmit = (submitEvent) => {\n    submitEvent.preventDefault();\n    if (!title) {\n      return;\n    }\n\n    const date = Date.now();\n\n    onAdd({\n      title,\n      id: date,\n      completed: false,\n    });\n    setTitle('');\n  };\n\n  const handleСancel = (keyEvent) => {\n    if (keyEvent.key === 'Escape' || keyEvent.key === 'Esc') {\n      setTitle('');\n    }\n  };\n\n  return (\n\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          value={title}\n          onKeyDown={handleСancel}\n          onChange={handleChange}\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n\n  );\n};\n\nTodoApp.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoItem.scss';\n\nexport const TodoItem = ({\n  todo,\n  onDelete,\n  onChange,\n  handleEditChanges,\n}) => {\n  const [checked, setChecked] = useState(todo.completed);\n  const [title, setTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setChecked(todo.completed);\n  }, [todo]);\n\n  const handleDoubleClick = (clickEvent) => {\n    const li = clickEvent.currentTarget.closest('div').closest('li');\n    const input = li.querySelector('.edit');\n\n    li.classList.add('editing');\n    input.focus();\n  };\n\n  const handleKeyPress = (keyEvent) => {\n    const li = keyEvent.currentTarget.closest('li');\n    const todoText = todo.title;\n\n    if (keyEvent.key === 'Escape' || keyEvent.key === 'Esc') {\n      li.classList.remove('editing');\n      setTitle(todo.title);\n    }\n\n    if (keyEvent.key === 'Enter') {\n      if (title.length === 0) {\n        setTitle(todoText);\n        li.className = '';\n\n        return;\n      }\n\n      setTitle(title);\n      handleEditChanges(todo.id, title);\n      li.classList.remove('editing');\n    }\n  };\n\n  const handleChange = (changeEvent) => {\n    setTitle(changeEvent.target.value);\n  };\n\n  return (\n\n    <li id=\"todo\">\n      <div className=\"view\">\n        <input\n          checked={todo.completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => {\n            setChecked(!checked);\n\n            return onChange(todo.id);\n          }}\n        />\n        <label\n          className={\n            todo.completed\n              ? 'completed'\n              : ''\n          }\n          onDoubleClick={handleDoubleClick}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onDelete(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        onKeyDown={handleKeyPress}\n        onChange={handleChange}\n        value={title}\n      />\n    </li>\n\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  handleEditChanges: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodosFilter.scss';\n\nexport const TodosFilter = ({ length, clearing, sortTodos }) => {\n  const [classAll, setClassAll] = useState('selected');\n  const [classActive, setClassActive] = useState('');\n  const [classCompleted, setClassCompleted] = useState('');\n\n  const handleClick = (event) => {\n    setClassAll('');\n    setClassActive('');\n    setClassCompleted('');\n\n    switch (event.target.name) {\n      case 'All': setClassAll('selected'); break;\n      case 'Active': setClassActive('selected'); break;\n      default: setClassCompleted('selected');\n    }\n\n    sortTodos(event);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${length} `}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            className={classAll}\n            onClick={handleClick}\n            type=\"button\"\n            name=\"All\"\n          >\n            All\n          </button>\n        </li>\n\n        <li>\n          <button\n            className={classActive}\n            type=\"button\"\n            onClick={handleClick}\n            name=\"Active\"\n          >\n            Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            className={classCompleted}\n            type=\"button\"\n            onClick={handleClick}\n            name=\"Completed\"\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n\n      {length > 0\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={clearing}\n          >\n            Clear completed\n          </button>\n        )\n      }\n\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  length: PropTypes.number.isRequired,\n  clearing: PropTypes.func.isRequired,\n  sortTodos: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  handleClearing,\n  onDelete,\n  onChange,\n  handleEditChanges,\n}) => {\n  const [sortedTodo, setSortedTodo] = useState('All');\n  const [notes, setNotes] = useState(todos);\n\n  useEffect(() => {\n    if (sortedTodo === 'All') {\n      setNotes(todos);\n    } else if (sortedTodo === 'Active') {\n      setNotes(todos.filter(it => it.completed === false));\n    } else {\n      setNotes(todos.filter(it => it.completed === true));\n    }\n  }, [sortedTodo, todos]);\n\n  const sortTodos = (event) => {\n    const buttom = event.target;\n\n    if (buttom.name === 'All') {\n      setSortedTodo('All');\n    }\n\n    if (buttom.name === 'Active') {\n      setSortedTodo('Active');\n    }\n\n    if (buttom.name === 'Completed') {\n      setSortedTodo('Completed');\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {notes\n          && notes.map(todo => (\n            <TodoItem\n              key={todo.id}\n              onDelete={onDelete}\n              onChange={onChange}\n              handleEditChanges={handleEditChanges}\n              todo={todo}\n            />\n          ))}\n      </ul>\n\n      {todos.length > 0\n        && (\n        <TodosFilter\n          length={todos.length}\n          sortTodos={sortTodos}\n          clearing={handleClearing}\n        />\n        )\n      }\n\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  handleClearing: PropTypes.func.isRequired,\n  handleEditChanges: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState(\n    JSON.parse(window.localStorage.getItem('todos')) || [],\n  );\n  const [todo, setTodo] = useState();\n  const [isAllChecked, setAllChecked] = useState(false);\n\n  useEffect(() => {\n    if (todo) {\n      setTodos(prevTodos => [...prevTodos, todo]);\n    }\n  }, [todo]);\n\n  useEffect(() => {\n    window.localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const deleteCompletedTodos = (id) => {\n    setTodos(newTodos => newTodos.filter(item => item.id !== id));\n  };\n\n  const handleCheckbox = useCallback((id) => {\n    const completedTodo = todos.find(item => item.id === id);\n\n    completedTodo.completed = !completedTodo.completed;\n    window.localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleEditChanges = (id, title) => {\n    const changedTodo = todos.find(item => item.id === id);\n\n    changedTodo.title = title;\n    window.localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  const handleClearing = () => {\n    const newTodos = todos.filter(item => item.completed !== true);\n\n    setTodos(newTodos);\n  };\n\n  const setAllCompleted = () => {\n    const newTodos = todos.map((item) => {\n      const note = item;\n\n      if (!isAllChecked) {\n        note.completed = true;\n      } else {\n        note.completed = false;\n      }\n\n      return note;\n    });\n\n    setAllChecked(!isAllChecked);\n\n    setTodos(newTodos);\n    window.localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <TodoApp onAdd={setTodo} />\n\n      <section className=\"main\">\n        {todos.length > 0\n          && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onClick={setAllCompleted}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )\n        }\n\n        <TodoList\n          handleEditChanges={handleEditChanges}\n          todos={todos}\n          handleClearing={handleClearing}\n          onDelete={deleteCompletedTodos}\n          onChange={handleCheckbox}\n        />\n      </section>\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}